name: Deploy BlazorGolf Web API CI/CD

env:
  CONFIGURATION: Debug
  TESTAPP_PACKAGE_PATH: './tests/ApiTests'
  TEST_FILE_NAME: 'apitests'
  AZURE_WEBAPP_NAME: app-api-blazorgolf 
  AZURE_WEBAPP_SOURCE_PATH: './src/BlazorGolf.Api'
  AZURE_WEBAPP_PACKAGE_PATH: './api'
  API_PACKAGE_NAME: 'api-app' 
  DOTNET_VERSION: '6.0.x'

on:
  push:
    branches:
      - main
    paths:
      - 'src/BlazorGolf.Api/**'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      
      - name: Set up dependency caching for faster builds
        uses: actions/cache@v2
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Build and Publish
        shell: bash
        run: |
          pushd '${{ env.AZURE_WEBAPP_SOURCE_PATH }}'
          dotnet build --configuration ${{ env.CONFIGURATION }}
          dotnet publish -c ${{env.CONFIGURATION}}  -o ${{env.AZURE_WEBAPP_PACKAGE_PATH}}
          popd

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v2
        with:
          name: ${{env.API_PACKAGE_NAME}}
          path: '${{ env.AZURE_WEBAPP_SOURCE_PATH }}/api'

      - name: 'Run unit tests'
        shell: bash
        run: |
          pushd './${{ env.TESTAPP_PACKAGE_PATH }}'
          dotnet test --collect:"XPlat Code Coverage" --configuration ${{ env.CONFIGURATION }}
          popd
        
      - name: ReportGenerator
        uses: danielpalme/ReportGenerator-GitHub-Action@5.0.2
        with:
          reports: './${{ env.TESTAPP_PACKAGE_PATH }}/TestResults/**/coverage.cobertura.xml' # REQUIRED # The coverage reports that should be parsed (separated by semicolon). Globbing is supported.
          targetdir: 'coveragereport' # REQUIRED # The directory where the generated report should be saved.
          reporttypes: 'HtmlInline;Cobertura' # The output formats and scope (separated by semicolon) Values: Badges, Clover, Cobertura, CsvSummary, Html, HtmlChart, HtmlInline, HtmlInline_AzurePipelines, HtmlInline_AzurePipelines_Dark, HtmlSummary, JsonSummary, Latex, LatexSummary, lcov, MarkdownSummary, MHtml, PngChart, SonarQube, TeamCitySummary, TextSummary, Xml, XmlSummary
          sourcedirs: './${{ env.TESTAPP_PACKAGE_PATH }}' # Optional directories which contain the corresponding source code (separated by semicolon). The source directories are used if coverage report contains classes without path information.
          historydir: '' # Optional directory for storing persistent coverage information. Can be used in future reports to show coverage evolution.
          plugins: '' # Optional plugin files for custom reports or custom history storage (separated by semicolon).
          assemblyfilters: '+*' # Optional list of assemblies that should be included or excluded in the report. Exclusion filters take precedence over inclusion filters. Wildcards are allowed.
          classfilters: '+*' # Optional list of classes that should be included or excluded in the report. Exclusion filters take precedence over inclusion filters. Wildcards are allowed.
          filefilters: '+*' # Optional list of files that should be included or excluded in the report. Exclusion filters take precedence over inclusion filters. Wildcards are allowed.
          verbosity: 'Info' # The verbosity level of the log messages. Values: Verbose, Info, Warning, Error, Off
          title: 'BlazorGolf Coverage Report' # Optional title.
          tag: '${{ github.run_number }}_${{ github.run_id }}' # Optional tag or build version.
          customSettings: '' # Optional custom settings (separated by semicolon). See: https://github.com/danielpalme/ReportGenerator/wiki/Settings.
          toolpath: 'reportgeneratortool' # Default directory for installing the dotnet tool.
        
      - name: Upload coverage report artifact
        uses: actions/upload-artifact@v2.2.3
        with:
          name: CoverageReport # Artifact name        
          path: coveragereport # Directory containing files to upload
          
        # upload report as build artifact 
      - name: Upload a Build Artifact (Tests)
        uses: actions/upload-artifact@v2
        with:
          name : CoverageReport
          path: ${{github.workspace}}/coveragereport

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v2

      - name: List package path contents
        shell: bash
        run: |
          ls -ld $PWD/*

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.DEV_AZURE_WEBAPI_PUBLISH_PROFILE }}
          package: ${{env.API_PACKAGE_NAME}}
